1. Even if other teams or any potential malicious presence succeeds in intercepting the bytes going across the
 network, the original security of the protocol using private key encryption. Even if a user gains access to
unadulterated messages going across a network, they will have no way to decrypt the encryption unless they gain
access to this private key. Since other teams wouldn't be able to decrypt the message, the network is still 
secure and trying to crack the decryption key is much too computationally intensive to be feasible. Security of the 
contents is only true for ssh and protocols where decryption uses the private key.
 Using the GNU-Guard protocol however, prevents tampering but doesn't 100% prevent loss of
information(this was discussed in class) since it is possible, albeit difficult, to obtain the public key to decrypt 
the information.  However, the way the GNU-Guard protocol is designed makes it difficult to obtain this public key so
 as long as the public key is kept secret from the user, the network is also secure.

However, if the team were to record my keystrokes, they would gain access to the authentication passphrase
 that could be used to gain access to decrypted data and my private key. Obtaining keystrokes would certainly mean
 that the network has compromised its own security and access to this private key would give the obtainer access
to all network communication.

Moreover, if I was booting off a USB and other teams had control of said USB, the network would also be insecure.
USB's can be easily compromised by hiding malicious software in its fireware. Teams can gain access to the root
user account on a USB user and gain access to the .ssh folder that contains all of the private and public
 authentication keys that are used to decrypt and encrypt incoming and outgoing data. The entire security 
infrastructure of the network revolves around keeping these keys secret so once they are known the security 
of the entire network becomes compromised.

2. gpg --verify doesn't actually verify the original creator/owner of the tar file in question. This is due to
the fact that "gpg --verify"'s functionality is only to verify that message the decryption using the public key
generates matches the message generated by the message digest algorithm. External sources with capable of 
decrypting and encrypting the message can intercept, alter, and send his/her own public key and signature
with the message. This would cause no warnings to be triggered on the receiving end as long as the two
 receiver's messages match when decrypted.

The solution to this problem, which is a widespread solution in the modern day, is to use a trusted third party
source to verify the owner/creator of each file. If the third party source can trace the origin of the file back
to the verified owner, then all the receiver needs to do is trust that third party source in order to ensure the
data is secure with no adulteration.
